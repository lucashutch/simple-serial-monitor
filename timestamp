#!/usr/bin/env python3
import argparse
from datetime import datetime, timezone
from typing import Tuple

def parse_and_convert_time(time_input: str) -> Tuple[str, str]:
    """
    Parses the time input (timestamp or ISO 8601 string) and
    converts it to UTC and local time ISO 8601 strings.
    """
    # Get local timezone info
    local_tz = datetime.now().astimezone().tzinfo

    try:
        # 1. Attempt to parse as a float (timestamp)
        ts = float(time_input)

        # Detect milliseconds
        if ts > 1e12:
            ts /= 1000.0

        # Convert timestamp to an aware datetime object in UTC
        dt_aware = datetime.fromtimestamp(ts, tz=timezone.utc)

    except ValueError:
        # 2. If float conversion fails, attempt to parse as an ISO 8601 string
        time_string = time_input.strip()

        try:
            # datetime.fromisoformat() handles 'Z' and offsets like '+10:30' directly
            dt_aware = datetime.fromisoformat(time_string)

            # If the resulting datetime object is naive, assume UTC
            if dt_aware.tzinfo is None or dt_aware.tzinfo.utcoffset(dt_aware) is None:
                dt_aware = dt_aware.replace(tzinfo=timezone.utc)

        except ValueError as e:
            # Re-raise the error with a helpful message
            raise ValueError(
                f"Input '{time_input}' is neither a valid Unix timestamp nor a valid ISO 8601 string."
            ) from e

    # Convert the aware datetime object to the target timezones
    dt_utc = dt_aware.astimezone(timezone.utc)
    dt_local = dt_aware.astimezone(local_tz)

    # Format as ISO 8601 with milliseconds
    # Replace '+00:00' with 'Z' for UTC output
    utc_str = dt_utc.isoformat(timespec="milliseconds").replace("+00:00", "Z")
    local_str = dt_local.isoformat(timespec="milliseconds")

    return utc_str, local_str


def main():
    parser = argparse.ArgumentParser(
        description="Convert a Unix timestamp (seconds/milliseconds) or an ISO 8601 "
                    "time string to UTC and local time in ISO 8601 format."
    )
    # The argument type is str to handle both numeric and string date formats
    parser.add_argument(
        "time_input",
        type=str,
        help="Time value (e.g., 1761660634.104 or 2025-10-26T14:10:34.104Z)"
    )

    args = parser.parse_args()

    try:
        utc_str, local_str = parse_and_convert_time(args.time_input)

        print(f"UTC:   {utc_str}")
        print(f"Local: {local_str}")
    except ValueError as e:
        print(f"Error: {e}")
        parser.print_help()


if __name__ == "__main__":
    main()
